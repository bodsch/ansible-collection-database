#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
# "#" anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, run "pg_ctl reload", or execute
# "SELECT pg_reload_conf()".  Some parameters, which are marked below,
# require a server shutdown and restart to take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# "postgres -c log_connections=on".  Some parameters can be changed at run time
# with the "SET" SQL command.
#
# Memory units:  B  = bytes            Time units:  us  = microseconds
#                kB = kilobytes                     ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days


#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

# The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

#data_directory = 'ConfigDir'           # use data in another directory
                                        # (change requires restart)
#hba_file = 'ConfigDir/pg_hba.conf'     # host-based authentication file
                                        # (change requires restart)
#ident_file = 'ConfigDir/pg_ident.conf' # ident configuration file
                                        # (change requires restart)

# If external_pid_file is not explicitly set, no extra PID file is written.
#external_pid_file = ''                 # write an extra PID file
                                        # (change requires restart)


#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

{% if postgresql_config_connections | bodsch.core.type == "dict" %}
# - Connection Settings -
  {% if postgresql_config_connections.listen_addresses is defined and
        postgresql_config_connections.listen_addresses | bodsch.core.type == "list" and
        postgresql_config_connections.listen_addresses | count > 0 %}
listen_addresses                = {{ postgresql_config_connections.listen_addresses | join(',') }}
  {% endif %}
  {% if postgresql_config_connections.port is defined and
        postgresql_config_connections.port | string | length > 0 %}
port                            = {{ postgresql_config_connections.port }}
  {% endif %}
  {% if postgresql_config_connections.max_connections is defined and
        postgresql_config_connections.max_connections | string | length > 0 %}
max_connections                 = {{ postgresql_config_connections.max_connections }}
  {% endif %}
  {% if postgresql_config_connections.max_connections is defined and
        postgresql_config_connections.max_connections | string | length > 0 %}
reserved_connections            =  {{ postgresql_config_connections.max_connections }}
  {% endif %}
  {% if postgresql_config_connections.superuser_reserved_connections is defined and
        postgresql_config_connections.superuser_reserved_connections | string | length > 0 %}
superuser_reserved_connections  = {{ postgresql_config_connections.superuser_reserved_connections }}
  {% endif %}
  {% if postgresql_config_connections.unix.socket.directories is defined and
        postgresql_config_connections.unix.socket.directories | bodsch.core.type == "list" and
        postgresql_config_connections.unix.socket.directories | count > 0 %}
unix_socket_directories         = '{{ postgresql_config_connections.unix.socket.directories | join(",") }}'
  {% endif %}
  {% if postgresql_config_connections.unix.socket.group is defined and
        postgresql_config_connections.unix.socket.group | string | length > 0 %}
unix_socket_group               = '{{ postgresql_config_connections.unix.socket.group }}'
  {% endif %}
  {% if postgresql_config_connections.unix.socket.permissions is defined and
        postgresql_config_connections.unix.socket.permissions | string | length > 0 %}
unix_socket_permissions         = {{ postgresql_config_connections.unix.socket.permissions }}
  {% endif %}
  {% if postgresql_config_connections.bonjour.enabled is defined and
        postgresql_config_connections.bonjour.enabled | string | length > 0 %}
bonjour                         = {{ postgresql_config_connections.bonjour.enabled | bodsch.core.config_bool(true_as="on", false_as="off") }}
  {% endif %}
  {% if postgresql_config_connections.bonjour.name is defined and
        postgresql_config_connections.bonjour.name | string | length > 0 %}
bonjour_name                    = {{ postgresql_config_connections.bonjour.name }}
  {% endif %}
  {% if postgresql_config_connections.tcp.keepalives.idle is defined and
        postgresql_config_connections.tcp.keepalives.idle | string | length > 0 %}
# - TCP settings -
# see "man tcp" for details
tcp_keepalives_idle             = {{ postgresql_config_connections.tcp.keepalives.idle }}
  {% endif %}
  {% if postgresql_config_connections.tcp.keepalives.interval is defined and
        postgresql_config_connections.tcp.keepalives.interval | string | length > 0 %}
tcp_keepalives_interval         = {{ postgresql_config_connections.tcp.keepalives.interval }}
  {% endif %}
  {% if postgresql_config_connections.tcp.keepalives.count is defined and
        postgresql_config_connections.tcp.keepalives.count | string | length > 0 %}
tcp_keepalives_count            = {{ postgresql_config_connections.tcp.keepalives.count }}
  {% endif %}
  {% if postgresql_config_connections.tcp_user_timeout is defined and
        postgresql_config_connections.tcp_user_timeout | string | length > 0 %}
tcp_user_timeout                = {{ postgresql_config_connections.tcp_user_timeout }}
  {% endif %}
  {% if postgresql_config_connections.client_connection_check_interval is defined and
        postgresql_config_connections.client_connection_check_interval | string | length > 0 %}
client_connection_check_interval = {{ postgresql_config_connections.client_connection_check_interval }}
  {% endif %}

{% endif %}
{% if postgresql_config_authentication | bodsch.core.type == "dict" %}
# - Authentication -
  {% if postgresql_config_authentication.authentication_timeout is defined and
        postgresql_config_authentication.authentication_timeout | string | length > 0 %}
  {# 1s-600s #}
authentication_timeout           = {{ postgresql_config_authentication.authentication_timeout }}
  {% endif %}
  {% if postgresql_config_authentication.password_encryption is defined and
        postgresql_config_authentication.password_encryption | string | length > 0 %}
  {# scram-sha-256 or md5 #}
password_encryption             = {{ postgresql_config_authentication.password_encryption }}
  {% endif %}
  {% if postgresql_config_authentication.scram_iterations is defined and
        postgresql_config_authentication.scram_iterations | string | length > 0 %}
  {# 4096 #}
scram_iterations                = {{ postgresql_config_authentication.scram_iterations }}
  {% endif %}
  {% if postgresql_config_authentication.krb.server.keyfile is defined and
        postgresql_config_authentication.krb.server.keyfile | string | length > 0 %}
# GSSAPI using Kerberos
krb_server_keyfile              = '{{ postgresql_config_authentication.krb.server.keyfile }}'
  {% endif %}
  {% if postgresql_config_authentication.krb.caseins_users is defined and
        postgresql_config_authentication.krb.caseins_users | string | length > 0 %}
krb_caseins_users               = {{ postgresql_config_authentication.krb.caseins_users | bodsch.core.config_bool(true_as="on", false_as="off") }}
  {% endif %}
  {% if postgresql_config_authentication.gss.accept_delegation is defined and
        postgresql_config_authentication.gss.accept_delegation | string | length > 0 %}
gss_accept_delegation           = {{ postgresql_config_authentication.gss.accept_delegation | bodsch.core.config_bool(true_as="on", false_as="off") }}
  {% endif %}
# - SSL -
  {% if postgresql_config_authentication.ssl | bodsch.core.type == "dict" %}
    {% if postgresql_config_authentication.ssl.enabled is defined and
          postgresql_config_authentication.ssl.enabled | string | length > 0 %}
ssl                             = {{ postgresql_config_authentication.ssl.enabled | bodsch.core.config_bool(true_as="on", false_as="off") }}
      {% if postgresql_config_authentication.ssl.ca_file is defined and
            postgresql_config_authentication.ssl.ca_file | string | length > 0 %}
ssl_ca_file                     = '{{ postgresql_config_authentication.ssl.ca_file }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.cert_file is defined and
            postgresql_config_authentication.ssl.cert_file | string | length > 0 %}
ssl_cert_file                   = '{{ postgresql_config_authentication.ssl.cert_file }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.crl_file is defined and
            postgresql_config_authentication.ssl.crl_file | string | length > 0 %}
ssl_crl_file                    = '{{ postgresql_config_authentication.ssl.crl_file }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.crl_dir is defined and
            postgresql_config_authentication.ssl.crl_dir | string | length > 0 %}
ssl_crl_dir                     = '{{ postgresql_config_authentication.ssl.crl_dir }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.key_file is defined and
            postgresql_config_authentication.ssl.key_file | string | length > 0 %}
ssl_key_file                    = '{{ postgresql_config_authentication.ssl.key_file }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.ciphers is defined and
            postgresql_config_authentication.ssl.ciphers | bodsch.core.type == "list" and
            postgresql_config_authentication.ssl.ciphers | count > 0 %}
ssl_ciphers                     = '{{ postgresql_config_authentication.ssl.ciphers | join(':') }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.prefer_server_ciphers is defined and
            postgresql_config_authentication.ssl.prefer_server_ciphers | string | length > 0 %}
ssl_prefer_server_ciphers       = {{ postgresql_config_authentication.ssl.prefer_server_ciphers | bodsch.core.config_bool(true_as="on", false_as="off") }}
      {% endif %}
      {% if postgresql_config_authentication.ssl.ecdh_curve is defined and
            postgresql_config_authentication.ssl.ecdh_curve | string | length > 0 %}
ssl_ecdh_curve                  = '{{ postgresql_config_authentication.ssl.ecdh_curve }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.min_protocol_version is defined and
            postgresql_config_authentication.ssl.min_protocol_version | string | length > 0 %}
ssl_min_protocol_version        = '{{ postgresql_config_authentication.ssl.min_protocol_version }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.max_protocol_version is defined and
            postgresql_config_authentication.ssl.max_protocol_version | string | length > 0 %}
ssl_max_protocol_version        = '{{ postgresql_config_authentication.ssl.max_protocol_version }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.dh_params_file is defined and
            postgresql_config_authentication.ssl.dh_params_file | string | length > 0 %}
ssl_dh_params_file              = '{{ postgresql_config_authentication.ssl.dh_params_file }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.passphrase_command is defined and
            postgresql_config_authentication.ssl.passphrase_command | string | length > 0 %}
ssl_passphrase_command          = '{{ postgresql_config_authentication.ssl.passphrase_command }}'
      {% endif %}
      {% if postgresql_config_authentication.ssl.passphrase_command_supports_reload is defined and
            postgresql_config_authentication.ssl.passphrase_command_supports_reload | string | length > 0 %}
ssl_passphrase_command_supports_reload = {{ postgresql_config_authentication.ssl.passphrase_command_supports_reload | bodsch.core.config_bool(true_as="on", false_as="off") }}
      {% endif %}
    {% endif %}
  {% endif %}
{% endif %}

#------------------------------------------------------------------------------
# RESOURCE USAGE (except WAL)
#------------------------------------------------------------------------------
{% if postgresql_config_memory | bodsch.core.type == "dict" %}
# - Memory -
  {% if postgresql_config_memory.shared_buffers is defined and
        postgresql_config_memory.shared_buffers | string | length > 0 %}
shared_buffers                  = {{ postgresql_config_memory.shared_buffers }}
  {% endif %}
  {% if postgresql_config_memory.huge_pages is defined and
        postgresql_config_memory.huge_pages | string | length > 0 and %}
    {% if postgresql_config_memory.huge_pages | bodsch.core.type == "bool" %}
huge_pages                      = {{ postgresql_config_memory.huge_pages | bodsch.core.config_bool(true_as="on", false_as="off") }}
    {% elif postgresql_config_memory.huge_pages | bodsch.core.type == "string" and
            postgresql_config_memory.huge_pages ind in ['on', 'off', 'try'] %}
huge_pages                      = {{ postgresql_config_memory.huge_pages }}
    {% endif %}
  {% endif %}
  {% if postgresql_config_memory.huge_page_size is defined and
        postgresql_config_memory.huge_page_size | string | length > 0 %}
huge_page_size                  = {{ postgresql_config_memory.huge_page_size | int }}
  {% endif %}
  {% if postgresql_config_memory.temp_buffers is defined and
        postgresql_config_memory.temp_buffers | string | length > 0 %}
temp_buffers                    = {{ postgresql_config_memory.temp_buffers }}
  {% endif %}
  {% if postgresql_config_memory.max_prepared_transactions is defined and
        postgresql_config_memory.max_prepared_transactions | string | length > 0 %}
max_prepared_transactions       = {{ postgresql_config_memory.max_prepared_transactions }}
  {% endif %}
# Caution: it is not advisable to set max_prepared_transactions nonzero unless
# you actively intend to use prepared transactions.
  {% if postgresql_config_memory.work_mem is defined and
        postgresql_config_memory.work_mem | string | length > 0 %}
work_mem                        = {{ postgresql_config_memory.work_mem }}
  {% endif %}
  {% if postgresql_config_memory.hash_mem_multiplier is defined and
        postgresql_config_memory.hash_mem_multiplier | string | length > 0 %}
hash_mem_multiplier             = {{ postgresql_config_memory.hash_mem_multiplier }}
  {% endif %}
  {% if postgresql_config_memory.maintenance_work_mem is defined and
        postgresql_config_memory.maintenance_work_mem | string | length > 0 %}
maintenance_work_mem            = {{ postgresql_config_memory.maintenance_work_mem }}
  {% endif %}
  {% if postgresql_config_memory.autovacuum_work_mem is defined and
        postgresql_config_memory.autovacuum_work_mem | string | length > 0 %}
autovacuum_work_mem             = {{ postgresql_config_memory.autovacuum_work_mem }}
  {% endif %}
  {% if postgresql_config_memory.logical_decoding_work_mem is defined and
        postgresql_config_memory.logical_decoding_work_mem | string | length > 0 %}
logical_decoding_work_mem       = {{ postgresql_config_memory.logical_decoding_work_mem }}
  {% endif %}
  {% if postgresql_config_memory.max_stack_depth is defined and
        postgresql_config_memory.max_stack_depth | string | length > 0 %}
max_stack_depth                 = {{ postgresql_config_memory.max_stack_depth }}
  {% endif %}
  {% if postgresql_config_memory.shared_memory_type is defined and
        postgresql_config_memory.shared_memory_type | string | length > 0 %}
shared_memory_type              = {{ postgresql_config_memory.shared_memory_type }}
  {% endif %}
  {% if postgresql_config_memory.dynamic_shared_memory_type is defined and
        postgresql_config_memory.dynamic_shared_memory_type | string | length > 0 %}
dynamic_shared_memory_type      = {{ postgresql_config_memory.dynamic_shared_memory_type }}
  {% endif %}
  {% if postgresql_config_memory.min_dynamic_shared_memory is defined and
        postgresql_config_memory.min_dynamic_shared_memory | string | length > 0 %}
min_dynamic_shared_memory       = {{ postgresql_config_memory.min_dynamic_shared_memory }}
  {% endif %}
  {% if postgresql_config_memory.vacuum_buffer_usage_limit is defined and
        postgresql_config_memory.vacuum_buffer_usage_limit | string | length > 0 %}
vacuum_buffer_usage_limit       = {{ postgresql_config_memory.vacuum_buffer_usage_limit }}
  {% endif %}
  {% if postgresql_config_memory.commit_timestamp_buffers is defined and
        postgresql_config_memory.commit_timestamp_buffers | string | length > 0 %}
# SLRU buffers (change requires restart)
commit_timestamp_buffers        = {{ postgresql_config_memory.commit_timestamp_buffers }}
  {% endif %}
  {% if postgresql_config_memory.multixact_offset_buffers is defined and
        postgresql_config_memory.multixact_offset_buffers | string | length > 0 %}
multixact_offset_buffers        = {{ postgresql_config_memory.multixact_offset_buffers }}
  {% endif %}
  {% if postgresql_config_memory.multixact_member_buffers is defined and
        postgresql_config_memory.multixact_member_buffers | string | length > 0 %}
multixact_member_buffers        = {{ postgresql_config_memory.multixact_member_buffers }}
  {% endif %}
  {% if postgresql_config_memory.notify_buffers is defined and
        postgresql_config_memory.notify_buffers | string | length > 0 %}
notify_buffers                  = {{ postgresql_config_memory.notify_buffers }}
  {% endif %}
  {% if postgresql_config_memory.serializable_buffers is defined and
        postgresql_config_memory.serializable_buffers | string | length > 0 %}
serializable_buffers            = {{ postgresql_config_memory.serializable_buffers }}
  {% endif %}
  {% if postgresql_config_memory.subtransaction_buffers is defined and
        postgresql_config_memory.subtransaction_buffers | string | length > 0 %}
subtransaction_buffers          = {{ postgresql_config_memory.subtransaction_buffers }}
  {% endif %}
  {% if postgresql_config_memory.transaction_buffers is defined and
        postgresql_config_memory.transaction_buffers | string | length > 0 %}
transaction_buffers             = {{ postgresql_config_memory.transaction_buffers }}
  {% endif %}

{% endif %}
{% if postgresql_config_disk | bodsch.core.type == "dict" %}
# - Disk -
  {% if postgresql_config_disk.temp_file_limit is defined and
        postgresql_config_disk.temp_file_limit | string | length > 0 %}
temp_file_limit                 = {{ postgresql_config_disk.temp_file_limit }}
  {% endif %}
  {% if postgresql_config_disk.max_notify_queue_pages is defined and
        postgresql_config_disk.max_notify_queue_pages | string | length > 0 %}
max_notify_queue_pages          = {{ postgresql_config_disk.max_notify_queue_pages }}
  {% endif %}

{% endif %}
{% if postgresql_config_kernel | bodsch.core.type == "dict" %}
# - Kernel Resources -
  {% if postgresql_config_kernel.max_files_per_process is defined and
        postgresql_config_kernel.max_files_per_process | string | length > 0 %}
max_files_per_process           = {{ postgresql_config_kernel.max_files_per_process }}
  {% endif %}

{% endif %}
{% if postgresql_config_vacuum | bodsch.core.type == "dict" %}
# - Cost-Based Vacuum Delay -
  {% if postgresql_config_vacuum.vacuum_cost_delay is defined and
        postgresql_config_vacuum.vacuum_cost_delay | string | length > 0 %}
vacuum_cost_delay               = {{ postgresql_config_vacuum.vacuum_cost_delay }}
  {% endif %}
  {% if postgresql_config_vacuum.vacuum_cost_page_hit is defined and
        postgresql_config_vacuum.vacuum_cost_page_hit | string | length > 0 %}
vacuum_cost_page_hit            = {{ postgresql_config_vacuum.vacuum_cost_page_hit }}
  {% endif %}
  {% if postgresql_config_vacuum.vacuum_cost_page_miss is defined and
        postgresql_config_vacuum.vacuum_cost_page_miss | string | length > 0 %}
vacuum_cost_page_miss           = {{ postgresql_config_vacuum.vacuum_cost_page_miss }}
  {% endif %}
  {% if postgresql_config_vacuum.vacuum_cost_page_dirty is defined and
        postgresql_config_vacuum.vacuum_cost_page_dirty | string | length > 0 %}
vacuum_cost_page_dirty          = {{ postgresql_config_vacuum.vacuum_cost_page_dirty }}
  {% endif %}
  {% if postgresql_config_vacuum.vacuum_cost_limit is defined and
        postgresql_config_vacuum.vacuum_cost_limit | string | length > 0 %}
vacuum_cost_limit               = {{ postgresql_config_vacuum.vacuum_cost_limit }}
  {% endif %}

{% endif %}
{% if postgresql_config_bgwriter | bodsch.core.type == "dict" %}
# - Background Writer -
  {% if postgresql_config_bgwriter.bgwriter_delay is defined and
        postgresql_config_bgwriter.bgwriter_delay | string | length > 0 %}
bgwriter_delay                  = {{ postgresql_config_bgwriter.bgwriter_delay }}
  {% endif %}
  {% if postgresql_config_bgwriter.bgwriter_lru_maxpages is defined and
        postgresql_config_bgwriter.bgwriter_lru_maxpages | string | length > 0 %}
bgwriter_lru_maxpages           = {{ postgresql_config_bgwriter.bgwriter_lru_maxpages }}
  {% endif %}
  {% if postgresql_config_bgwriter.bgwriter_lru_multiplier is defined and
        postgresql_config_bgwriter.bgwriter_lru_multiplier | string | length > 0 %}
bgwriter_lru_multiplier         = {{ postgresql_config_bgwriter.bgwriter_lru_multiplier }}
  {% endif %}
  {% if postgresql_config_bgwriter.bgwriter_flush_after is defined and
        postgresql_config_bgwriter.bgwriter_flush_after | string | length > 0 %}
bgwriter_flush_after            = {{ postgresql_config_bgwriter.bgwriter_flush_after }}
  {% endif %}

{% endif %}
{% if postgresql_config_async_behavior | bodsch.core.type == "dict" %}
# - Asynchronous Behavior -
  {% if postgresql_config_async_behavior.backend_flush_after is defined and
        postgresql_config_async_behavior.backend_flush_after | string | length > 0 %}
backend_flush_after             = {{ postgresql_config_async_behavior.backend_flush_after }}
  {% endif %}
  {% if postgresql_config_async_behavior.effective_io_concurrency is defined and
        postgresql_config_async_behavior.effective_io_concurrency | string | length > 0 %}
effective_io_concurrency        = {{ postgresql_config_async_behavior.effective_io_concurrency }}
  {% endif %}
  {% if postgresql_config_async_behavior.maintenance_io_concurrency is defined and
        postgresql_config_async_behavior.maintenance_io_concurrency | string | length > 0 %}
maintenance_io_concurrency      = {{ postgresql_config_async_behavior.maintenance_io_concurrency }}
  {% endif %}
  {% if postgresql_config_async_behavior.io_combine_limit is defined and
        postgresql_config_async_behavior.io_combine_limit | string | length > 0 %}
io_combine_limit                = {{ postgresql_config_async_behavior.io_combine_limit }}
  {% endif %}
  {% if postgresql_config_async_behavior.max_worker_processes is defined and
        postgresql_config_async_behavior.max_worker_processes | string | length > 0 %}
max_worker_processes            = {{ postgresql_config_async_behavior.max_worker_processes }}
  {% endif %}
  {% if postgresql_config_async_behavior.max_parallel_workers_per_gather is defined and
        postgresql_config_async_behavior.max_parallel_workers_per_gather | string | length > 0 %}
max_parallel_workers_per_gather = {{ postgresql_config_async_behavior.max_parallel_workers_per_gather }}
  {% endif %}
  {% if postgresql_config_async_behavior.max_parallel_maintenance_workers is defined and
        postgresql_config_async_behavior.max_parallel_maintenance_workers | string | length > 0 %}
max_parallel_maintenance_workers = {{ postgresql_config_async_behavior.max_parallel_maintenance_workers }}
  {% endif %}
  {% if postgresql_config_async_behavior.max_parallel_workers is defined and
        postgresql_config_async_behavior.max_parallel_workers | string | length > 0 %}
max_parallel_workers            = {{ postgresql_config_async_behavior.max_parallel_workers }}
  {% endif %}
  {% if postgresql_config_async_behavior.parallel_leader_participation is defined and
        postgresql_config_async_behavior.parallel_leader_participation | string | length > 0 %}
parallel_leader_participation   = {{ postgresql_config_async_behavior.parallel_leader_participation | bodsch.core.config_bool(true_as="on", false_as="off") }}
  {% endif %}
{% endif %}

#------------------------------------------------------------------------------
# WRITE-AHEAD LOG
#------------------------------------------------------------------------------

# - Settings -

#wal_level = replica                    # minimal, replica, or logical
                                        # (change requires restart)
#fsync = on                             # flush data to disk for crash safety
                                        # (turning this off can cause
                                        # unrecoverable data corruption)
#synchronous_commit = on                # synchronization level;
                                        # off, local, remote_write, remote_apply, or on
#wal_sync_method = fsync                # the default is the first option
                                        # supported by the operating system:
                                        #   open_datasync
                                        #   fdatasync (default on Linux and FreeBSD)
                                        #   fsync
                                        #   fsync_writethrough
                                        #   open_sync
#full_page_writes = on                  # recover from partial page writes
#wal_log_hints = off                    # also do full page writes of non-critical updates
                                        # (change requires restart)
#wal_compression = off                  # enables compression of full-page writes;
                                        # off, pglz, lz4, zstd, or on
#wal_init_zero = on                     # zero-fill new WAL files
#wal_recycle = on                       # recycle WAL files
#wal_buffers = -1                       # min 32kB, -1 sets based on shared_buffers
                                        # (change requires restart)
#wal_writer_delay = 200ms               # 1-10000 milliseconds
#wal_writer_flush_after = 1MB           # measured in pages, 0 disables
#wal_skip_threshold = 2MB

#commit_delay = 0                       # range 0-100000, in microseconds
#commit_siblings = 5                    # range 1-1000

# - Checkpoints -

#checkpoint_timeout = 5min              # range 30s-1d
#checkpoint_completion_target = 0.9     # checkpoint target duration, 0.0 - 1.0
#checkpoint_flush_after = 256kB         # measured in pages, 0 disables
#checkpoint_warning = 30s               # 0 disables
max_wal_size = 1GB
min_wal_size = 80MB

# - Prefetching during recovery -

#recovery_prefetch = try        # prefetch pages referenced in the WAL?
#wal_decode_buffer_size = 512kB # lookahead window used for prefetching
                                # (change requires restart)

# - Archiving -

#archive_mode = off             # enables archiving; off, on, or always
                                # (change requires restart)
#archive_library = ''           # library to use to archive a WAL file
                                # (empty string indicates archive_command should
                                # be used)
#archive_command = ''           # command to use to archive a WAL file
                                # placeholders: %p = path of file to archive
                                #               %f = file name only
                                # e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#archive_timeout = 0            # force a WAL file switch after this
                                # number of seconds; 0 disables

# - Archive Recovery -

# These are only used in recovery mode.

#restore_command = ''           # command to use to restore an archived WAL file
                                # placeholders: %p = path of file to restore
                                #               %f = file name only
                                # e.g. 'cp /mnt/server/archivedir/%f %p'
#archive_cleanup_command = ''   # command to execute at every restartpoint
#recovery_end_command = ''      # command to execute at completion of recovery

# - Recovery Target -

# Set these only when performing a targeted recovery.

#recovery_target = ''           # 'immediate' to end recovery as soon as a
                                # consistent state is reached
                                # (change requires restart)
#recovery_target_name = ''      # the named restore point to which recovery will proceed
                                # (change requires restart)
#recovery_target_time = ''      # the time stamp up to which recovery will proceed
                                # (change requires restart)
#recovery_target_xid = ''       # the transaction ID up to which recovery will proceed
                                # (change requires restart)
#recovery_target_lsn = ''       # the WAL LSN up to which recovery will proceed
                                # (change requires restart)
#recovery_target_inclusive = on # Specifies whether to stop:
                                # just after the specified recovery target (on)
                                # just before the recovery target (off)
                                # (change requires restart)
#recovery_target_timeline = 'latest'    # 'current', 'latest', or timeline ID
                                        # (change requires restart)
#recovery_target_action = 'pause'       # 'pause', 'promote', 'shutdown'
                                        # (change requires restart)

# - WAL Summarization -

#summarize_wal = off            # run WAL summarizer process?
#wal_summary_keep_time = '10d'  # when to remove old summary files, 0 = never


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Servers -

# Set these on the primary and on any standby that will send replication data.

#max_wal_senders = 10           # max number of walsender processes
                                # (change requires restart)
#max_replication_slots = 10     # max number of replication slots
                                # (change requires restart)
#wal_keep_size = 0              # in megabytes; 0 disables
#max_slot_wal_keep_size = -1    # in megabytes; -1 disables
#wal_sender_timeout = 60s       # in milliseconds; 0 disables
#track_commit_timestamp = off   # collect timestamp of transaction commit
                                # (change requires restart)

# - Primary Server -

# These settings are ignored on a standby server.

#synchronous_standby_names = '' # standby servers that provide sync rep
                                # method to choose sync standbys, number of sync standbys,
                                # and comma-separated list of application_name
                                # from standby(s); '*' = all
#synchronized_standby_slots = ''        # streaming replication standby server slot
                                # names that logical walsender processes will wait for

# - Standby Servers -

# These settings are ignored on a primary server.

#primary_conninfo = ''                  # connection string to sending server
#primary_slot_name = ''                 # replication slot on sending server
#hot_standby = on                       # "off" disallows queries during recovery
                                        # (change requires restart)
#max_standby_archive_delay = 30s        # max delay before canceling queries
                                        # when reading WAL from archive;
                                        # -1 allows indefinite delay
#max_standby_streaming_delay = 30s      # max delay before canceling queries
                                        # when reading streaming WAL;
                                        # -1 allows indefinite delay
#wal_receiver_create_temp_slot = off    # create temp slot if primary_slot_name
                                        # is not set
#wal_receiver_status_interval = 10s     # send replies at least this often
                                        # 0 disables
#hot_standby_feedback = off             # send info from standby to prevent
                                        # query conflicts
#wal_receiver_timeout = 60s             # time that receiver waits for
                                        # communication from primary
                                        # in milliseconds; 0 disables
#wal_retrieve_retry_interval = 5s       # time to wait before retrying to
                                        # retrieve WAL after a failed attempt
#recovery_min_apply_delay = 0           # minimum delay for applying changes during recovery
#sync_replication_slots = off           # enables slot synchronization on the physical standby from the primary

# - Subscribers -

# These settings are ignored on a publisher.

#max_logical_replication_workers = 4    # taken from max_worker_processes
                                        # (change requires restart)
#max_sync_workers_per_subscription = 2  # taken from max_logical_replication_workers
#max_parallel_apply_workers_per_subscription = 2        # taken from max_logical_replication_workers


#------------------------------------------------------------------------------
# QUERY TUNING
#------------------------------------------------------------------------------

# - Planner Method Configuration -

#enable_async_append = on
#enable_bitmapscan = on
#enable_gathermerge = on
#enable_hashagg = on
#enable_hashjoin = on
#enable_incremental_sort = on
#enable_indexscan = on
#enable_indexonlyscan = on
#enable_material = on
#enable_memoize = on
#enable_mergejoin = on
#enable_nestloop = on
#enable_parallel_append = on
#enable_parallel_hash = on
#enable_partition_pruning = on
#enable_partitionwise_join = off
#enable_partitionwise_aggregate = off
#enable_presorted_aggregate = on
#enable_seqscan = on
#enable_sort = on
#enable_tidscan = on
#enable_group_by_reordering = on

# - Planner Cost Constants -

#seq_page_cost = 1.0                    # measured on an arbitrary scale
#random_page_cost = 4.0                 # same scale as above
#cpu_tuple_cost = 0.01                  # same scale as above
#cpu_index_tuple_cost = 0.005           # same scale as above
#cpu_operator_cost = 0.0025             # same scale as above
#parallel_setup_cost = 1000.0           # same scale as above
#parallel_tuple_cost = 0.1              # same scale as above
#min_parallel_table_scan_size = 8MB
#min_parallel_index_scan_size = 512kB
#effective_cache_size = 4GB

#jit_above_cost = 100000                # perform JIT compilation if available
                                        # and query more expensive than this;
                                        # -1 disables
#jit_inline_above_cost = 500000         # inline small functions if query is
                                        # more expensive than this; -1 disables
#jit_optimize_above_cost = 500000       # use expensive JIT optimizations if
                                        # query is more expensive than this;
                                        # -1 disables

# - Genetic Query Optimizer -

#geqo = on
#geqo_threshold = 12
#geqo_effort = 5                        # range 1-10
#geqo_pool_size = 0                     # selects default based on effort
#geqo_generations = 0                   # selects default based on effort
#geqo_selection_bias = 2.0              # range 1.5-2.0
#geqo_seed = 0.0                        # range 0.0-1.0

# - Other Planner Options -

#default_statistics_target = 100        # range 1-10000
#constraint_exclusion = partition       # on, off, or partition
#cursor_tuple_fraction = 0.1            # range 0.0-1.0
#from_collapse_limit = 8
#jit = on                               # allow JIT compilation
#join_collapse_limit = 8                # 1 disables collapsing of explicit
                                        # JOIN clauses
#plan_cache_mode = auto                 # auto, force_generic_plan or
                                        # force_custom_plan
#recursive_worktable_factor = 10.0      # range 0.001-1000000


#------------------------------------------------------------------------------
# REPORTING AND LOGGING
#------------------------------------------------------------------------------

# - Where to Log -

#log_destination = 'stderr'             # Valid values are combinations of
                                        # stderr, csvlog, jsonlog, syslog, and
                                        # eventlog, depending on platform.
                                        # csvlog and jsonlog require
                                        # logging_collector to be on.

# This is used when logging to stderr:
#logging_collector = off                # Enable capturing of stderr, jsonlog,
                                        # and csvlog into log files. Required
                                        # to be on for csvlogs and jsonlogs.
                                        # (change requires restart)

# These are only used if logging_collector is on:
#log_directory = 'log'                  # directory where log files are written,
                                        # can be absolute or relative to PGDATA
#log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'        # log file name pattern,
                                                        # can include strftime() escapes
#log_file_mode = 0600                   # creation mode for log files,
                                        # begin with 0 to use octal notation
#log_rotation_age = 1d                  # Automatic rotation of logfiles will
                                        # happen after that time.  0 disables.
#log_rotation_size = 10MB               # Automatic rotation of logfiles will
                                        # happen after that much log output.
                                        # 0 disables.
#log_truncate_on_rotation = off         # If on, an existing log file with the
                                        # same name as the new log file will be
                                        # truncated rather than appended to.
                                        # But such truncation only occurs on
                                        # time-driven rotation, not on restarts
                                        # or size-driven rotation.  Default is
                                        # off, meaning append to existing files
                                        # in all cases.

# These are relevant when logging to syslog:
#syslog_facility = 'LOCAL0'
#syslog_ident = 'postgres'
#syslog_sequence_numbers = on
#syslog_split_messages = on

# This is only relevant when logging to eventlog (Windows):
# (change requires restart)
#event_source = 'PostgreSQL'

# - When to Log -

#log_min_messages = warning             # values in order of decreasing detail:
                                        #   debug5
                                        #   debug4
                                        #   debug3
                                        #   debug2
                                        #   debug1
                                        #   info
                                        #   notice
                                        #   warning
                                        #   error
                                        #   log
                                        #   fatal
                                        #   panic

#log_min_error_statement = error        # values in order of decreasing detail:
                                        #   debug5
                                        #   debug4
                                        #   debug3
                                        #   debug2
                                        #   debug1
                                        #   info
                                        #   notice
                                        #   warning
                                        #   error
                                        #   log
                                        #   fatal
                                        #   panic (effectively off)

#log_min_duration_statement = -1        # -1 is disabled, 0 logs all statements
                                        # and their durations, > 0 logs only
                                        # statements running at least this number
                                        # of milliseconds

#log_min_duration_sample = -1           # -1 is disabled, 0 logs a sample of statements
                                        # and their durations, > 0 logs only a sample of
                                        # statements running at least this number
                                        # of milliseconds;
                                        # sample fraction is determined by log_statement_sample_rate

#log_statement_sample_rate = 1.0        # fraction of logged statements exceeding
                                        # log_min_duration_sample to be logged;
                                        # 1.0 logs all such statements, 0.0 never logs


#log_transaction_sample_rate = 0.0      # fraction of transactions whose statements
                                        # are logged regardless of their duration; 1.0 logs all
                                        # statements from all transactions, 0.0 never logs

#log_startup_progress_interval = 10s    # Time between progress updates for
                                        # long-running startup operations.
                                        # 0 disables the feature, > 0 indicates
                                        # the interval in milliseconds.

# - What to Log -

#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_plan = off
#debug_pretty_print = on
#log_autovacuum_min_duration = 10min    # log autovacuum activity;
                                        # -1 disables, 0 logs all actions and
                                        # their durations, > 0 logs only
                                        # actions running at least this number
                                        # of milliseconds.
#log_checkpoints = on
#log_connections = off
#log_disconnections = off
#log_duration = off
#log_error_verbosity = default          # terse, default, or verbose messages
#log_hostname = off
#log_line_prefix = '%m [%p] '           # special values:
                                        #   %a = application name
                                        #   %u = user name
                                        #   %d = database name
                                        #   %r = remote host and port
                                        #   %h = remote host
                                        #   %b = backend type
                                        #   %p = process ID
                                        #   %P = process ID of parallel group leader
                                        #   %t = timestamp without milliseconds
                                        #   %m = timestamp with milliseconds
                                        #   %n = timestamp with milliseconds (as a Unix epoch)
                                        #   %Q = query ID (0 if none or not computed)
                                        #   %i = command tag
                                        #   %e = SQL state
                                        #   %c = session ID
                                        #   %l = session line number
                                        #   %s = session start timestamp
                                        #   %v = virtual transaction ID
                                        #   %x = transaction ID (0 if none)
                                        #   %q = stop here in non-session
                                        #        processes
                                        #   %% = '%'
                                        # e.g. '<%u%%%d> '
#log_lock_waits = off                   # log lock waits >= deadlock_timeout
#log_recovery_conflict_waits = off      # log standby recovery conflict waits
                                        # >= deadlock_timeout
#log_parameter_max_length = -1          # when logging statements, limit logged
                                        # bind-parameter values to N bytes;
                                        # -1 means print in full, 0 disables
#log_parameter_max_length_on_error = 0  # when logging an error, limit logged
                                        # bind-parameter values to N bytes;
                                        # -1 means print in full, 0 disables
#log_statement = 'none'                 # none, ddl, mod, all
#log_replication_commands = off
#log_temp_files = -1                    # log temporary files equal or larger
                                        # than the specified size in kilobytes;
                                        # -1 disables, 0 logs all temp files
log_timezone = UTC

# - Process Title -

#cluster_name = ''                      # added to process titles if nonempty
                                        # (change requires restart)
#update_process_title = on


#------------------------------------------------------------------------------
# STATISTICS
#------------------------------------------------------------------------------

# - Cumulative Query and Index Statistics -

#track_activities = on
#track_activity_query_size = 1024       # (change requires restart)
#track_counts = on
#track_io_timing = off
#track_wal_io_timing = off
#track_functions = none                 # none, pl, all
#stats_fetch_consistency = cache        # cache, none, snapshot


# - Monitoring -

#compute_query_id = auto
#log_statement_stats = off
#log_parser_stats = off
#log_planner_stats = off
#log_executor_stats = off


#------------------------------------------------------------------------------
# AUTOVACUUM
#------------------------------------------------------------------------------

#autovacuum = on                        # Enable autovacuum subprocess?  'on'
                                        # requires track_counts to also be on.
#autovacuum_max_workers = 3             # max number of autovacuum subprocesses
                                        # (change requires restart)
#autovacuum_naptime = 1min              # time between autovacuum runs
#autovacuum_vacuum_threshold = 50       # min number of row updates before
                                        # vacuum
#autovacuum_vacuum_insert_threshold = 1000      # min number of row inserts
                                                # before vacuum; -1 disables insert
                                                # vacuums
#autovacuum_analyze_threshold = 50      # min number of row updates before
                                        # analyze
#autovacuum_vacuum_scale_factor = 0.2   # fraction of table size before vacuum
#autovacuum_vacuum_insert_scale_factor = 0.2    # fraction of inserts over table
                                                # size before insert vacuum
#autovacuum_analyze_scale_factor = 0.1  # fraction of table size before analyze
#autovacuum_freeze_max_age = 200000000  # maximum XID age before forced vacuum
                                        # (change requires restart)
#autovacuum_multixact_freeze_max_age = 400000000        # maximum multixact age
                                                        # before forced vacuum
                                                        # (change requires restart)
#autovacuum_vacuum_cost_delay = 2ms     # default vacuum cost delay for
                                        # autovacuum, in milliseconds;
                                        # -1 means use vacuum_cost_delay
#autovacuum_vacuum_cost_limit = -1      # default vacuum cost limit for
                                        # autovacuum, -1 means use
                                        # vacuum_cost_limit


#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

#client_min_messages = notice           # values in order of decreasing detail:
                                        #   debug5
                                        #   debug4
                                        #   debug3
                                        #   debug2
                                        #   debug1
                                        #   log
                                        #   notice
                                        #   warning
                                        #   error
#search_path = '"$user", public'        # schema names
#row_security = on
#default_table_access_method = 'heap'
#default_tablespace = ''                # a tablespace name, '' uses the default
#default_toast_compression = 'pglz'     # 'pglz' or 'lz4'
#temp_tablespaces = ''                  # a list of tablespace names, '' uses
                                        # only default tablespace
#check_function_bodies = on
#default_transaction_isolation = 'read committed'
#default_transaction_read_only = off
#default_transaction_deferrable = off
#session_replication_role = 'origin'
#statement_timeout = 0                          # in milliseconds, 0 is disabled
#transaction_timeout = 0                        # in milliseconds, 0 is disabled
#lock_timeout = 0                               # in milliseconds, 0 is disabled
#idle_in_transaction_session_timeout = 0        # in milliseconds, 0 is disabled
#idle_session_timeout = 0                       # in milliseconds, 0 is disabled
#vacuum_freeze_table_age = 150000000
#vacuum_freeze_min_age = 50000000
#vacuum_failsafe_age = 1600000000
#vacuum_multixact_freeze_table_age = 150000000
#vacuum_multixact_freeze_min_age = 5000000
#vacuum_multixact_failsafe_age = 1600000000
#bytea_output = 'hex'                   # hex, escape
#xmlbinary = 'base64'
#xmloption = 'content'
#gin_pending_list_limit = 4MB
#createrole_self_grant = ''             # set and/or inherit
#event_triggers = on

# - Locale and Formatting -

datestyle = 'iso, mdy'
#intervalstyle = 'postgres'
timezone = UTC
#timezone_abbreviations = 'Default'     # Select the set of available time zone
                                        # abbreviations.  Currently, there are
                                        #   Default
                                        #   Australia (historical usage)
                                        #   India
                                        # You can create your own file in
                                        # share/timezonesets/.
#extra_float_digits = 1                 # min -15, max 3; any value >0 actually
                                        # selects precise output mode
#client_encoding = sql_ascii            # actually, defaults to database
                                        # encoding

# These settings are initialized by initdb, but they can be changed.
lc_messages = 'C.UTF-8'                 # locale for system error message
                                        # strings
lc_monetary = 'C.UTF-8'                 # locale for monetary formatting
lc_numeric = 'C.UTF-8'                  # locale for number formatting
lc_time = 'C.UTF-8'                     # locale for time formatting

#icu_validation_level = warning         # report ICU locale validation
                                        # errors at the given level

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

# - Shared Library Preloading -

#local_preload_libraries = ''
#session_preload_libraries = ''
#shared_preload_libraries = ''          # (change requires restart)
#jit_provider = 'llvmjit'               # JIT library to use

# - Other Defaults -

#dynamic_library_path = '$libdir'
#gin_fuzzy_search_limit = 0


#------------------------------------------------------------------------------
# LOCK MANAGEMENT
#------------------------------------------------------------------------------

#deadlock_timeout = 1s
#max_locks_per_transaction = 64         # min 10
                                        # (change requires restart)
#max_pred_locks_per_transaction = 64    # min 10
                                        # (change requires restart)
#max_pred_locks_per_relation = -2       # negative values mean
                                        # (max_pred_locks_per_transaction
                                        #  / -max_pred_locks_per_relation) - 1
#max_pred_locks_per_page = 2            # min 0


#------------------------------------------------------------------------------
# VERSION AND PLATFORM COMPATIBILITY
#------------------------------------------------------------------------------

# - Previous PostgreSQL Versions -

#array_nulls = on
#backslash_quote = safe_encoding        # on, off, or safe_encoding
#escape_string_warning = on
#lo_compat_privileges = off
#quote_all_identifiers = off
#standard_conforming_strings = on
#synchronize_seqscans = on

# - Other Platforms and Clients -

#transform_null_equals = off
#allow_alter_system = on


#------------------------------------------------------------------------------
# ERROR HANDLING
#------------------------------------------------------------------------------

#exit_on_error = off                    # terminate session on any error?
#restart_after_crash = on               # reinitialize after backend crash?
#data_sync_retry = off                  # retry or panic on failure to fsync
                                        # data?
                                        # (change requires restart)
#recovery_init_sync_method = fsync      # fsync, syncfs (Linux 5.8+)


#------------------------------------------------------------------------------
# CONFIG FILE INCLUDES
#------------------------------------------------------------------------------

# These options allow settings to be loaded from files other than the
# default postgresql.conf.  Note that these are directives, not variable
# assignments, so they can usefully be given more than once.

#include_dir = '...'                    # include files ending in '.conf' from
                                        # a directory, e.g., 'conf.d'
#include_if_exists = '...'              # include file only if it exists
#include = '...'                        # include file


#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here
