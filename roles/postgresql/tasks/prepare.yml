---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. artixlinux
        - "{{ ansible_distribution | lower | replace(' ', '') }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        - default.yml
      skip: true

# - name: validate postgresql users
#   ansible.builtin.fail:
#     msg: "your users definition is not valid!\n
#           The following parameters are required:\n
#           - name\n
#           - password"
#   when:
#     - postgresql_users is defined
#     - postgresql_users | count > 0
#     - (not item.name is defined or item.name | length == 0) or
#       (not item.password is defined or item.password | length == 0)
#   run_once: true
#   loop: "{{ postgresql_users }}"
#   loop_control:
#     label: "{{ item.name | default('undefined') }}"

- name: install dependecies
  ansible.builtin.package:
    name: "{{ postgresql_dependencies }}"
    state: present

- name: detect if postgresql installed
  ansible.builtin.stat:
    path: /usr/bin/postgres
    get_checksum: false
    get_mime: false
  register: postgresql_binary_file

- name: define postgresql_installed if postgresql installed
  ansible.builtin.set_fact:
    postgresql_installed: "{{ postgresql_binary_file.stat.exists }}"
  when:
    - postgresql_binary_file is defined
    - postgresql_binary_file.stat is defined


# - name: repositories
#   ansible.builtin.include_tasks: repositories.yml
#   when:
#     - ansible_os_family | lower == 'debian'
#
# - name: update facts to get latest information
#   ansible.builtin.setup:
#
# - name: merge postgresql configuration segment for server between defaults and custom
#   ansible.builtin.set_fact:
#     postgresql_config_server: "{{ postgresql_config_defaults_server | combine(postgresql_config_server, recursive=True) }}"
#     postgresql_config_client: "{{ postgresql_config_defaults_client | combine(postgresql_config_client, recursive=True) }}"
#     postgresql_config_mysql: "{{ postgresql_config_defaults_mysql | combine(postgresql_config_mysql, recursive=True) }}"
#     postgresql_config_mysqld: "{{ postgresql_config_defaults_mysqld | combine(postgresql_config_mysqld, recursive=True) }}"
#     postgresql_config_mysqld_safe: "{{ postgresql_config_defaults_mysqld_safe | combine(postgresql_config_mysqld_safe, recursive=True) }}"
#     postgresql_config_mysqldump: "{{ postgresql_config_defaults_mysqldump | combine(postgresql_config_mysqldump, recursive=True) }}"
#     postgresql_config_galera: "{{ postgresql_config_defaults_galera | combine(postgresql_config_galera, recursive=True) }}"
#     postgresql_config_embedded: "{{ postgresql_config_defaults_embedded | combine(postgresql_config_embedded, recursive=True) }}"
#     postgresql_config_custom: "{{ postgresql_config_defaults_custom | combine(postgresql_config_custom, recursive=True) }}"
#     postgresql_replication: "{{ postgresql_defaults_replication | combine(postgresql_replication, recursive=True) }}"
#     postgresql_galera: "{{ postgresql_defaults_galera | combine(postgresql_galera, recursive=True) }}"
#     postgresql_tls_certificate: "{{ postgresql_defaults_tls_certificate | combine(postgresql_tls_certificate, recursive=True) }}"
#
# - name: detect if postgresql installed
#   ansible.builtin.stat:
#     path: /usr/bin/postgresqld-safe
#     get_checksum: false
#     get_mime: false
#   register: mysqld_binary_file
#
# - name: define postgresql_installed if postgresql installed
#   ansible.builtin.set_fact:
#     postgresql_installed: "{{ mysqld_binary_file.stat.exists }}"
#   when:
#     - mysqld_binary_file is defined
#     - mysqld_binary_file.stat is defined
#
# - name: detect galera cluster
#   ansible.builtin.set_fact:
#     _postgresql_galera_cluster: "{{ postgresql_config_galera | bodsch.database.detect_galera(hostvars) }}"
#   run_once: true
#   when:
#     - postgresql_config_galera is defined
#     - postgresql_config_galera | bodsch.core.type == 'dict'
#     - postgresql_galera.node_addresses is defined
#     - postgresql_galera.node_addresses | bodsch.core.type == 'list'
#     - postgresql_galera.node_addresses | count > 0
#
# - name: d
#   debug:
#     msg:
#       - "{{ _postgresql_galera_cluster }}"
#       - "{{ hostname | default('') }}"
#       - "{{ ansible_hostname | default('') }}"
#
# - name: define root system userdata
#   ansible.builtin.set_fact:
#     _postgresql_root_system_user: "{{ postgresql_system_users | bodsch.database.system_user('root') }}"
#
# - name: define postgresql_galera and postgresql_galera_cluster
#   ansible.builtin.set_fact:
#     postgresql_galera_cluster: "{{ _postgresql_galera_cluster.galera }}"
#     # postgresql_galera_primary: "{{ _postgresql_galera_cluster.primary }}"
#     postgresql_galera_primary_node: "{{ _postgresql_galera_cluster.cluster_primary_node }}"
#     postgresql_galera_replica_nodes: "{{ _postgresql_galera_cluster.cluster_replica_nodes }}"
#
# - name: galera packages
#   when:
#     - postgresql_galera_cluster
#     - ansible_distribution | lower == 'archlinux'
#   ansible.builtin.set_fact:
#     postgresql_packages: "{{ postgresql_packages + ['galera'] }}"
#
# - name: update facts to get latest information
#   ansible.builtin.setup:
#     gather_subset:
#       - '!all'
#       - '!any'
#       - facter

...
